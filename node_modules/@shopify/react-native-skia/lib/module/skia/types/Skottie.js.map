{"version":3,"names":["LineBreakType","VerticalTextAlign","ResizePolicy","InputState","ModifierKey"],"sources":["Skottie.ts"],"sourcesContent":["import type { SkCanvas } from \"./Canvas\";\nimport type { SkColor } from \"./Color\";\nimport type { SkData } from \"./Data\";\nimport type { SkJSIInstance } from \"./JsiInstance\";\nimport type { StrokeJoin } from \"./Paint\";\nimport type { TextAlign, TextDirection } from \"./Paragraph\";\nimport type { SkPoint } from \"./Point\";\nimport type { SkRect } from \"./Rect\";\nimport type { SkSize } from \"./Size\";\nimport type { SkTypeface } from \"./Typeface\";\n\nexport enum LineBreakType {\n  SoftLineBreak,\n  HardtLineBreak,\n}\n\nexport enum VerticalTextAlign {\n  Top,\n  TopBaseline,\n  // Skottie vertical alignment extensions\n  // Visual alignement modes -- these are using tight visual bounds for the paragraph.\n  VisualTop, // visual top    -> text box top\n  VisualCenter, // visual center -> text box center\n  VisualBottom, // visual bottom -> text box bottom\n}\n\nexport enum ResizePolicy {\n  // Use the specified text size.\n  None,\n  // Resize the text such that the extent box fits (snuggly) in the text box,\n  // both horizontally and vertically.\n  ScaleToFit,\n  // Same kScaleToFit if the text doesn't fit at the specified font size.\n  // Otherwise, same as kNone.\n  DownscaleToFit,\n}\n\nexport enum InputState {\n  Down,\n  Up,\n  Move,\n  Right,\n  Left,\n}\n\nexport enum ModifierKey {\n  None,\n  Shift,\n  Control,\n  Option,\n  Command,\n  FirstPress,\n}\n\nexport interface AnimationMarker {\n  name: string;\n  t0: number; // 0.0 to 1.0\n  t1: number; // 0.0 to 1.0\n}\n\nexport interface ColorProperty {\n  /**\n   * Property identifier, usually the node name.\n   */\n  key: string;\n  /**\n   * Property value (RGBA, 255-based).\n   */\n  value: SkColor;\n}\n\n/**\n * Named opacity property.\n */\nexport interface OpacityProperty {\n  /**\n   * Property identifier, usually the node name.\n   */\n  key: string;\n  /**\n   * Property value (0..100).\n   */\n  value: number;\n}\n\n/**\n * Text property value.\n */\nexport interface TextValue {\n  /**\n   * The text string payload.\n   */\n  text: string;\n  /**\n   * Font size.\n   */\n  size: number;\n}\n\n/**\n * Named text property.\n */\nexport interface TextProperty {\n  /**\n   * Property identifier, usually the node name.\n   */\n  key: string;\n  /**\n   * Property value.\n   */\n  value: TextValue;\n}\n\n/**\n * Transform property value. Maps to AE styled transform.\n */\nexport interface TransformValue {\n  /**\n   * Anchor point for transform. x and y value.\n   */\n  anchor: SkPoint;\n  /**\n   * Position of transform. x and y value.\n   */\n  position: SkPoint;\n  /**\n   * Scale of transform. x and y value.\n   */\n  scale: SkPoint;\n  /**\n   * Rotation of transform in degrees.\n   */\n  rotation: number;\n  /**\n   * Skew to apply during transform.\n   */\n  skew: number;\n  /**\n   * Direction of skew in degrees.\n   */\n  skewAxis: number;\n}\n\n/**\n * Named transform property for Skottie property observer.\n */\nexport interface TransformProperty {\n  /**\n   * Property identifier, usually the node name.\n   */\n  key: string;\n  /**\n   * Property value.\n   */\n  value: TransformValue;\n}\n\n/**\n * Collection of slot IDs sorted by value type\n */\nexport interface SlotInfo {\n  colorSlotIDs: string[];\n  scalarSlotIDs: string[];\n  vec2SlotIDs: string[];\n  imageSlotIDs: string[];\n  textSlotIDs: string[];\n}\n\n/**\n * Text property for ManagedAnimation's slot support\n */\nexport interface SlottableTextProperty {\n  typeface?: SkTypeface;\n  text?: string;\n  textSize?: number;\n\n  minTextSize?: number;\n  maxTextSize?: number;\n  strokeWidth?: number;\n  lineHeight?: number;\n  lineShift?: number;\n  ascent?: number;\n  maxLines?: number;\n\n  horizAlign?: TextAlign;\n  vertAlign?: VerticalTextAlign;\n  strokeJoin?: StrokeJoin;\n  direction?: TextDirection;\n  linebreak?: LineBreakType;\n  resize?: ResizePolicy;\n\n  boundingBox?: SkRect;\n  fillColor?: SkColor;\n  strokeColor?: SkColor;\n}\n\nexport interface SkSkottieAnimation extends SkJSIInstance<\"SkottieAnimation\"> {\n  /**\n   * Returns the animation duration in seconds.\n   */\n  duration(): number;\n  /**\n   * Returns the animation frame rate (frames / second).\n   */\n  fps(): number;\n\n  /**\n   * Draws current animation frame. Must call seek or seekFrame first.\n   * @param canvas\n   * @param dstRect\n   */\n  render(canvas: SkCanvas, dstRect?: SkRect): void;\n\n  /**\n   * Update the animation state to match |t|, specified as a frame index\n   * i.e. relative to duration() * fps().\n   *\n   * Returns the rectangle that was affected by this animation.\n   *\n   * @param frame - Fractional values are allowed and meaningful - e.g.\n   *                0.0 -> first frame\n   *                1.0 -> second frame\n   *                0.5 -> halfway between first and second frame\n   * @param damageRect - will copy damage frame into this if provided.\n   */\n  seekFrame(frame: number, damageRect?: SkRect): void;\n\n  size(): SkSize;\n\n  version(): string;\n\n  getSlotInfo(): SlotInfo;\n\n  setColorSlot(key: string, color: SkColor): boolean;\n  setScalarSlot(key: string, scalar: number): boolean;\n  setVec2Slot(key: string, vec2: SkPoint): boolean;\n  setTextSlot(key: string, text: SlottableTextProperty): boolean;\n  setImageSlot(key: string, assetName: string): boolean;\n\n  getColorSlot(key: string): SkColor | null;\n  getScalarSlot(key: string): number | null;\n  getVec2Slot(key: string): SkPoint | null;\n  getTextSlot(key: string): SlottableTextProperty | null;\n\n  getColorProps(): ColorProperty[];\n  getTextProps(): TextProperty[];\n  getOpacityProps(): OpacityProperty[];\n  getTransformProps(): TransformProperty[];\n\n  setColor(key: string, color: SkColor): boolean;\n  setText(key: string, text: string, size: number): boolean;\n  setOpacity(key: string, opacity: number): boolean;\n  setTransform(\n    key: string,\n    anchor: SkPoint,\n    position: SkPoint,\n    scale: SkPoint,\n    rotation: number,\n    skew: number,\n    skewAxis: number\n  ): boolean;\n}\n\nexport interface SkottieFactory {\n  Make(json: string, assets?: Record<string, SkData>): SkSkottieAnimation;\n}\n"],"mappings":"AAWA,WAAYA,aAAa,0BAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAKzB,WAAYC,iBAAiB,0BAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAG3B;EACA;EAJUA,iBAAiB,CAAjBA,iBAAiB;EAKhB;EALDA,iBAAiB,CAAjBA,iBAAiB;EAMb;EANJA,iBAAiB,CAAjBA,iBAAiB,wCAOb;EAAA,OAPJA,iBAAiB;AAAA;AAU7B,WAAYC,YAAY,0BAAZA,YAAY;EACtB;EADUA,YAAY,CAAZA,YAAY;EAGtB;EACA;EAJUA,YAAY,CAAZA,YAAY;EAMtB;EACA;EAPUA,YAAY,CAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;AAWxB,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAQtB,WAAYC,WAAW,0BAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;;AA0BvB;AACA;AACA;;AAYA;AACA;AACA;;AAYA;AACA;AACA;;AAYA;AACA;AACA;;AA4BA;AACA;AACA;;AAYA;AACA;AACA;;AASA;AACA;AACA","ignoreList":[]}